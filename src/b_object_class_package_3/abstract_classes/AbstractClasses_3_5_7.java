package b_object_class_package_3.abstract_classes;

import java.util.function.DoubleUnaryOperator;

/**
 * Реализуйте метод, выполняющий численное интегрирование заданной функции на заданном интервале по формуле левых прямоугольников.
 * Функция задана объектом, реализующим интерфейс java.util.function.DoubleUnaryOperator. Его метод applyAsDouble() принимает значение аргумента и возвращает значение функции в заданной точке.
 * Интервал интегрирования задается его конечными точками
 * a и
 * b, причем
 * a<=b. Для получения достаточно точного результата используйте шаг сетки не больше
 * Пример. Вызов
 *
 * integrate(x -> 1, 0, 10)
 * должен возвращать значение 10.
 * P.S. Если задача слишком легкая, то дополнительно можете реализовать динамический выбор шага сетки по следующему алгоритму:
 * Вычислить приближенное значение интеграла функции при начальном значении шага сетки (например, 1).
 * Вычислить приближенное значение интеграла функции при более мелком шаге сетки (например, уменьшить шаг сетки в два раза).
 * Если разность двух последовательных приближений интеграла функции достаточно мала, то завершаем алгоритм и возвращаем текущее приближение в качестве результата.
 * Иначе возвращаемся к шагу 2.
 */
public class AbstractClasses_3_5_7 {
    public static double integrate(DoubleUnaryOperator f, double a, double b) {
        double n = 10000000;
        double h = Math.abs(b - a) / n;
        double result = 0;
        //f = (s) -> Math.sin(s);

        for(int i = 0; i < n; i++) {
            result +=  f.applyAsDouble(a + h * i);
        }

        return result *= h;
    }
}
